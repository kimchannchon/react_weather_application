[{"/home/aqua01/Desktop/BLOCKCHAIN/react_weather_application/src/index.js":"1","/home/aqua01/Desktop/BLOCKCHAIN/react_weather_application/src/App.js":"2","/home/aqua01/Desktop/BLOCKCHAIN/react_weather_application/src/reportWebVitals.js":"3"},{"size":535,"mtime":1662234707626,"results":"4","hashOfConfig":"5"},{"size":2588,"mtime":1662425811353,"results":"6","hashOfConfig":"5"},{"size":362,"mtime":1662234707626,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","suppressedMessages":"10","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1ln0sk4",{"filePath":"11","messages":"12","suppressedMessages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/aqua01/Desktop/BLOCKCHAIN/react_weather_application/src/index.js",[],[],"/home/aqua01/Desktop/BLOCKCHAIN/react_weather_application/src/App.js",["18"],[],"import './App.css';\nimport { useEffect, useState } from 'react';\nimport axios from 'axios';\n\nfunction App() {\n\n  const [search, setSearch] = useState('')\n  const [allData, setAllData] = useState({\n    city:'',\n    country:'',\n    temperature:'',\n    humidity:'',\n    minTemperature:'',\n    weatherIcons:''\n  })\n\n  useEffect(() => {\n    // actions after rendering\n    // fetch the database info - API to request weather from WEATHER DATABASE\n    fetchData()\n  },[])\n\n  const fetchData = async (city) => {\n    // try catch - error handling\n    try{\n      const APIKEY = 'fc508fd00391873c1774a7c00017bb7e'\n      // axios - library to make request to the backend with promise\n      const result = await axios.get(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${APIKEY}&units=metric`)\n      await setAllData({\n        city: result.data.name,\n        country: result.data.sys.country,\n        temperature: result.data.main.temp,\n        humidity: result.data.main.humidity,\n        minTemperature: result.data.main.temp_min,\n        weatherIcons: result.data.weather[0].icon\n      })\n    } catch (e) {\n      console.log('API - Down')\n    }\n  }\n\n  const handleSubmit = (event) => {\n    console.log(search)\n    event.preventDefault()\n\n    fetchData(search)\n  }\n\n  const handleChange = (event) => {\n    setSearch(event.target.value)\n  }\n\n  return (\n    // Under <main> -form -display results\n    <main>\n      <div className=\"form\">\n        <form onSubmit={handleSubmit}>\n          <input\n          value={search}\n          type='text'\n          name='city'\n          placeholder='Location'\n          onChange={handleChange}\n          />\n          <button for='city'>SEARCH</button>\n        </form>\n        <section>\n          <div className='header-div'>\n            <div className='data'>\n              <img src={'http://openweathermap.org/img/wn/' + allData.weatherIcons + '.png'}/>            \n            <h1 className=\"title\">{allData.city}</h1>\n            <h2 className=\"location\">{allData.country}</h2>\n            </div>\n\n            <div className='weather-description'>\n              <div>\n                <h3>HUMIDITY</h3>\n                <p>{allData.humidity}%</p>\n              </div>\n              <div>\n                <h3>TEMPERATURE</h3>\n                <p>{allData.temperature}°C</p>\n              </div>\n              <div>\n                <h3>MIN TEMPERATURE</h3>\n                <p>{allData.minTemperature}°C</p>\n              </div>\n            </div>            \n          </div>\n        </section>\n      </div>\n    </main>\n  );\n}\n\nexport default App;\n","/home/aqua01/Desktop/BLOCKCHAIN/react_weather_application/src/reportWebVitals.js",[],[],{"ruleId":"19","severity":1,"message":"20","line":70,"column":15,"nodeType":"21","endLine":70,"endColumn":95},"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement"]